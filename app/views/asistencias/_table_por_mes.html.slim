- total_horas = 0

.alert.alert-success
  .center
    strong Asistencias Mensuales y descripcion del Trabajo Realizado.
.alert.alert-info
  button.close data-dismiss="alert" type="button" 
    i.ace-icon.fa.fa-times
  .center
    | Las horas estan expresadas en HH:MM
table class="table table-striped table-bordered"
  thead
    - if @proyecto_id == "all"
      tr
        th Fecha
        th Descripcion de la Asistencia
        th Descripcion del Trabajo Realizado
    - else
      tr
        th Fecha
        th Check [ In/Out ]
        th Proyecto
        th Hs Dedicadas

  tbody
    - if @proyecto_id == "all"
      - asistencias.each do |asistencia|
        - detalles_de_horarios = asistencia.horario.get_horarios_correspondientes(asistencia.check_in, asistencia.check_out)
        tr
          td = l asistencia.check_out.horaOutput, format: "%A %d/%m/%Y"
          td
            table.table.table-bordered
              thead
                tr
                  th Check [ In/Out ]
              tbody
                  tr
                    td = "Entrada: #{asistencia.check_in.horaOutput.strftime("%H:%M")} - Salida: #{asistencia.check_out.horaOutput.strftime("%H:%M")}"

          td
            table.table.table-striped.table-bordered
              thead
                tr
                  th Proyecto
                  th style="width: 118px;" Hs Dedicadas
              tbody
                - detalles_de_horarios.each do |dh|
                  tr
                    td = "#{dh.proyecto.codigo} - #{dh.proyecto.nombre}"
                    - text, segundos = calcular_horas_trabajadas_en_proyecto(asistencia.check_in.horaOutput, asistencia.check_out.horaOutput, dh)
                    - total_horas += segundos
                    td = text

                    / td = calcular_horas_trabajadas_en_proyecto(asistencia.check_in.horaOutput, asistencia.check_out.horaOutput, dh)
                tr
                  td style="text-align: right;" Total de Hs. Trabajadas
                  td = Time.at((asistencia.try(:horasTrabajadas)*60)*60).utc.strftime("%H:%M")
      tr
        td
        th Total de Horas Trabajadas
        - if total_horas != nil
          td.center
            strong
              - minutes = (total_horas / 60) % 60
              - hours = total_horas / (60 * 60)
              = format("%02d:%02d", hours, minutes)
        - else 
          td 00:00:00
    - else 
      - asistencias.each do |asistencia|
        - detalles_de_horarios = asistencia.get_detalle_horario(@proyecto_id.to_i).each do |dh|
        tr
          td = l asistencia.check_out.horaOutput, format: "%A %d/%m/%Y"
          td = "Entrada: #{asistencia.check_in.horaOutput.strftime("%H:%M")} - Salida: #{asistencia.check_out.horaOutput.strftime("%H:%M")}"
          - detalles_de_horarios.each do |dh|
            td = "#{dh.proyecto.codigo} - #{dh.proyecto.nombre}"
            - text, segundos = calcular_horas_trabajadas_en_proyecto(asistencia.check_in.horaOutput, asistencia.check_out.horaOutput, dh)
            - total_horas += segundos
            td.center = text
      tr
        td
        td
        th Total de Horas Trabajadas
        - if total_horas != nil
          td.center
            strong
              = Time.at(total_horas).utc.strftime("%H:%M")
        - else 
          td 00:00:00
